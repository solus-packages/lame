From b086b3ee2ef125648a86d7f330011b23fdbbe227 Mon Sep 17 00:00:00 2001
From: eblanca <eblanca76@users.sourceforge.net>
Date: Tue, 23 May 2017 23:30:11 +0200
Subject: [PATCH] ensure either 1 or 2 channels

---
 libmp3lame/set_get.c | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/libmp3lame/set_get.c b/libmp3lame/set_get.c
index 142c72542..1ed9bd8bc 100644
--- a/libmp3lame/set_get.c
+++ b/libmp3lame/set_get.c
@@ -91,7 +91,7 @@ lame_set_num_channels(lame_global_flags * gfp, int num_channels)
 {
     if (is_lame_global_flags_valid(gfp)) {
         /* default = 2 */
-        if (2 < num_channels || 0 == num_channels) {
+        if (1 != num_channels && 2 != num_channels) {
             return -1;  /* we don't support more than 2 channels */
         }
         gfp->num_channels = num_channels;
@@ -132,7 +132,7 @@ lame_get_scale(const lame_global_flags * gfp)
 }
 
 
-/* scale the channel 0 (left) input by this amount before 
+/* scale the channel 0 (left) input by this amount before
    encoding (not used for decoding) */
 int
 lame_set_scale_left(lame_global_flags * gfp, float scale)
@@ -155,7 +155,7 @@ lame_get_scale_left(const lame_global_flags * gfp)
 }
 
 
-/* scale the channel 1 (right) input by this amount before 
+/* scale the channel 1 (right) input by this amount before
    encoding (not used for decoding) */
 int
 lame_set_scale_right(lame_global_flags * gfp, float scale)
@@ -333,7 +333,7 @@ lame_get_ogg(const lame_global_flags * gfp)
  * Internal algorithm selection.
  * True quality is determined by the bitrate but this variable will effect
  * quality by selecting expensive or cheap algorithms.
- * quality=0..9.  0=best (very slow).  9=worst.  
+ * quality=0..9.  0=best (very slow).  9=worst.
  * recommended:  3     near-best quality, not too slow
  *               5     good quality, fast
  *               7     ok quality, really fast
@@ -521,7 +521,7 @@ lame_get_findReplayGain(const lame_global_flags * gfp)
 }
 
 
-/* Decode on the fly. Find the peak sample. If ReplayGain analysis is 
+/* Decode on the fly. Find the peak sample. If ReplayGain analysis is
    enabled then perform it on the decoded data. */
 int
 lame_set_decode_on_the_fly(lame_global_flags * gfp, int decode_on_the_fly)
@@ -927,7 +927,7 @@ lame_get_strict_ISO(const lame_global_flags * gfp)
 
 
 /********************************************************************
- * quantization/noise shaping 
+ * quantization/noise shaping
  ***********************************************************************/
 
 /* Disable the bit reservoir. For testing only. */
@@ -1118,7 +1118,7 @@ lame_get_VBR(const lame_global_flags * gfp)
 /*
  * VBR quality level.
  *  0 = highest
- *  9 = lowest 
+ *  9 = lowest
  */
 int
 lame_set_VBR_q(lame_global_flags * gfp, int VBR_q)
@@ -1382,7 +1382,7 @@ lame_get_highpasswidth(const lame_global_flags * gfp)
 
 
 /*
- * psycho acoustics and other arguments which you should not change 
+ * psycho acoustics and other arguments which you should not change
  * unless you know what you are doing
  */
 
@@ -1956,7 +1956,7 @@ lame_get_emphasis(const lame_global_flags * gfp)
 /* MPEG version.
  *  0 = MPEG-2
  *  1 = MPEG-1
- * (2 = MPEG-2.5)    
+ * (2 = MPEG-2.5)
  */
 int
 lame_get_version(const lame_global_flags * gfp)
@@ -2216,13 +2216,13 @@ lame_get_write_id3tag_automatic(lame_global_flags const *gfp)
 
 UNDOCUMENTED, experimental settings.  These routines are not prototyped
 in lame.h.  You should not use them, they are experimental and may
-change.  
+change.
 
 */
 
 
 /*
- *  just another daily changing developer switch  
+ *  just another daily changing developer switch
  */
 void CDECL lame_set_tune(lame_global_flags *, float);
 
